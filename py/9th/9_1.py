import numpy as np

# Определение функции


def f(x):
    return 1 / np.arctan(1 + x**2)

# Определение метода Невилла


def neville(x, y, xi):
    # Получаем количество точек
    n = len(x)
    # Создаем матрицу размером (n, n) для хранения значений метода Невилла
    p = np.zeros((n, n))
    # Заполняем первую диагональ матрицы значениями из y
    for i in range(n):
        p[i, i] = y[i]
    # Вычисляем значения метода Невилла для всех возможных пар точек (i, j), i<j
    for j in range(1, n):
        for i in range(n-j):
            p[i, j] = ((xi - x[i+j]) * p[i, j-1] + (x[i] - xi)
                       * p[i+1, j-1]) / (x[i] - x[i+j])
    # Возвращаем значение метода Невилла для первой точки (последняя строка, первый столбец)
    return p[0, n-1]


# Значения n для проверки метода
n_values = [4, 6, 10]
for n in n_values:
    # Генерируем равномерно распределенные точки на интервале [-3, 3]
    x = np.linspace(-3, 3, n+1)
    # Получаем значения функции в этих точках
    y = f(x)
    # Вычисляем значение функции методом Невилла в точках 1.5 и 2.5
    print(f"n={n}:")
    print(f"x=1.5, p(1.5)={neville(x, y, 1.5)}")
    print(f"x=2.5, p(2.5)={neville(x, y, 2.5)}")
